This is a stream-of-consciousness document about how to reorganise
IPFIX import in lib/fc, by Stephan Neuhaus.



Requirements:

Fast for the AVERAGE CASE.  The average case is the import and export
of IPv4 and IPv6 flows over TCP.  Import/export over UDP is
problematic anyway (because of dropped and out-of-order packets) and
SCTP can be a fig leaf to satisfy the IETF.

A typical IPFIX message looks like this (from
http://en.wikipedia.org/wiki/IP_Flow_Information_Export)

Bits 0..15                    | Bits 16..31
------------------------------+--------------------------
Version = 0x000a              | Message Length = 64 Bytes
Export Timestamp = 2005-12-31 23:59:60
Sequence Number = 0
Observation Domain ID = 12345678
Set ID = 2 (Template)         | Set Length = 20 Bytes
Template ID = 256             | Number of Fields = 3
Type = sourceIPv4Address      | Field Length = 4 Bytes
Type = destinationIPv4Address | Field Length = 4 Bytes
Type = packetDeltaCount       | Field Length = 4 Bytes
Set ID = 256 (Data Set        |
using Template 256)           | Set Length = 28 Bytes (= 4 + 2*12)
Record 1, Field 1 = 192.168.0.201
Record 1, Field 2 = 192.168.0.1
Record 1, Field 3 = 235 Packets
Record 2, Field 1 = 192.168.0.202
Record 2, Field 2 = 192.168.0.1
Record 2, Field 3 = 42 Packets

So the AVERAGE case is that a template describes a SEQUENCE of fields
of FIXED length, and these fields will arrive IN ORDER.


Some Questions/Remarks/Criticisms on IPFIX

Why does the type sourceIPv4Address not implicitly encode the length
as well?  Or in other words, when the type implies the length,
shouldn't the length be ignored?

I consider it a mistake to have the message length in the header
because it makes stream processing impossible.  This way, you need to
have the entire message in memory before you can send it.  Streaming
is nice because it keeps send buffers limited, is very fast on the
receiver end for fixed-length info, and you can send templates only
once.

It is also a mistake to have a length-encoding mechanism that
optimises away two bytes of length information at the expense of a
more complicated en/decoding algorithm.  No one cares these days about
two bytes more or less, even when you have billions of records (that's
then going to be 2 GiB, big deal).  However, if each en/decoding costs
just one nanosecond more, processing a billion records will be 1 s
longer.

Another mistake is to have the set length in bytes (instead of
records).


An Abstract Machine Language fir IPFIX

Let's look again at the template specification:

Template ID = 256             | Number of Fields = 3
Type = sourceIPv4Address      | Field Length = 4 Bytes
Type = destinationIPv4Address | Field Length = 4 Bytes
Type = packetDeltaCount       | Field Length = 4 Bytes

This naturally gives rise to:

class IPv4Flow : public Record {
private:
  IPv4Address source;
  IPv4Address destination;
  UInt32 count;
};

And we want to turn a sequence of records according to template 256
into a std::list (or something similar) of IPv4Flow-s.

The first step is to translate this into a list of (offset, type)
pairs.  Here, "offset" is the offset in bytes from the beginning of a
Record, and "type" is some sort of type identifier that identifies one
of the basic IPFIX types like IPv4Address or UInt32.

When a data set is read, this would cause the offsets to be loaded
according to the template ID.

This could be translated into the following program:

1: JNMB 8   ; Jump if No More Bytes to location 8
2: NR       ; Create new Record for the current template
3: RIP4     ; Read an IPv4 address into the first offset
4: RIP4     ; Read an IPv4 address into the second offset
5: RUI32    ; Read an unsigned 32-bit integer into the third offset
6: ADV      ; Insert current record
7: JMP 1    ; Read next record
8: END      ; Done

Basically the idea behind the abstract machine is: if you could invent
a machine to process IPFIX records, what would its assembly language
look like?

Instructions:

1. JNMB <loc>

Pops <loc> off the stack.  Conditional jump if no more bytes are available.

2. NR

Create new record fitting the current template.

3. RIP4

Read IPv4 address into current offset, advance offset counter

4. RUI32

Read unsigned 32-bit number into current offset, advance offset
counter.

5. ADV

Save the current Record, append it to the current Record list.

6. JMP <loc>

Pops <loc> off the stack. Unconditional jump to <loc>.

7. END

Stop processing records in this template, return the Record list.


An Instruction would be a class and it would look roughly like this:

class Instruction {
public:
  virtual void execute(Environment& e) = 0;
};

class RIPv4 : public Instruction {
public:
  void execute(Environment& e) {
    reinterpret_cast<IPv4Address>(e.current_address())->read(e);
    e.advance_offset_counter();
    e.advance_pc();
  }
};

class JMP : public Instruction {
public:
  void execute(Environment& e) {
    e.set_pc(e.pop());
  }
};

class NR : public Instruction {
public:
  void execute(Environment& e) {
    e.new_record();
};

class END : public Instruction {
public:
  void execute(Environment& e) {
    e.stop_executing();
  }
};


The main loop would be something like this:

class Environment {
private
  bool done_executing;
  unsigned int pc;
  std::vector<Instruction> instructions;

public:
  void Environment::execute() {
    /* Set up environment */
    // ...

    /* Set up list of instructions */
    // ...

    done_executing = false;
    pc = 0;

    while (!done_executing)
      instructions[pc].execute(*this);
  }
};

And that would be it.

Note that a format like this makes it trivially easy to parse much
more complicated templates, simply by adding more instructions.  You
have complicated constraints you want to check? No problem, just add a
few arithmetic instructions (a stack is already there anyway) and
there you go.

