What I want from a decoding API is the ability to say this:

"Hi. I'm interested in templates with ID 1234. These contain the
following IEs:

  * a sourceIPv4Address please place at this pointer: 0x12345678
  * a deltaPacketCount please place at this offset: 0x3456789a

After you're done decoding this, please call my callback
function. Also, here is a mutex that belongs to me and that you should
down() before you begin writing stuff into my private parts (ahem),
and that you should unlock() after calling the callback."

In other words:

// This class can be hidden and does not need to appear in any header
// file.
class RecordReaderInfo {
public:
  RecordReaderInfo();
  ~RecordReaderInfo();

private:
  RecordReader* reader;
  mutex& mutex;
  struct Element {
    const InfoElement* element; // From the wire template
    void* store;
  };
  std::list<Element*> elements;
};

class RecordUserRegistry {
public:
  void register(uint32_t template_id,
                RecordUser& user,
                mutex& m,
                std::list<std::pair<const InfoElement*, off_t
                offset>);
private:
  std::multimap<uint32_t tid, RecordReaderInfo> readers;
};

class RecordReader {
public:
  virtual void decoding_finished() = 0;
};

Classes wanting to use the registrar would then derive from RecordReader
(cleverly exploiting the new C++ initialisation rules):

class MyRecord : public RecordReader {
private:
  uint32_t source_address;
  uint64_t delta_count;
  mutex my_mutex;

public:
  MyRecord() {
    // ...
    InfoModel* m = InfoModel::instance();
    RecordUserRegistry& r = RecordUserRegistry::instance();
    r.register(1234, this, my_mutex,
               { { m->lookupIE("sourceIPv4Address"), &source_address) },
                 { m->lookupIE("deltaPacketCount"), &delta_count) });
  }

  void decoding_finished() {
    // At this point, source_address and delta_count contain the
    // values from the most recent record.

    // Do something with source_address and delta_count. No need to
    // lock() the mutex, that's done below.
  }

  void f() {
    my_mutex.lock();
      // Do something with source_address and delta_count. Now one
      // must lock() the mutex first, since it's not guaranteed to be
      // down before the call to f().
    my_mutex.unlock();
  }

};


And there would be some central dispatcher that would do the
dispatching according to the template id:

void SomeClass::decode_current_record() {
  uint32_t tid = ...; // Get template ID from current set

  // It might be a good idea to interchange the order of loops here,
  // because that would allow one to cache decoded IE values.  On the
  // other hand, (1) this decoding is usually simple and (2) there
  // will generally be only one user per record (denying the value of
  // caching through copying twice), so that caching might be more of
  // a nuisance than an asset. 
  for (auto i = registered_users.find(tid); i != multimap::end; ++i) {
    // Set up offsets as above

    i->mutex.lock();
    for (auto ie = i->ies.begin(); ie != i->ies.end(); ++i) {
      // decode IE; see below
    }
    i->user.decoding_finished();
    i->mutex.unlock();
  }
}

That should be reasonably compact and fast, and it would solve the
concurrency problems also by having one central point at which to
lock() and unlock() the respective mutexes.

Let's say that the WireTemplate that we have just decoded contains the
following IEs with their respective encoded lengths:

sourceIPv4Address, 4
destinationIPv4Address, 4
informationElementName, kVarlen
informationElementSemantics, 1
informationElementRangeEnd, 4
informationElementUnits, 2
deltaPacketCount, 4

Offset computation would then be as follows:

First, set up record offsets for the current record:

  /* Can also reuse an array that's already there, since all values in
   * the array will be overwritten. */
  size_t* record_offset = new size_t[n_ies];
  size_t current_offset = 0;

  for (unsigned int i = 0; i < n_ies; i++) {
    record_offset[i] = current_offset;
    if (ie_descriptions[i].ie_length == kVarlen)
      current_offset = 0;
    else
      current_offset += ie_descriptions[i].ie_length;
  }

Then update them whenever a Varlen has just been successfully
decoded:

  if (isVarlen((ie_descriptions[i].ie)) {
    size_t next_offset = current_offset + ie_length;
    for (unsigned int j = i + 1;
         j < n_ies && !isVarlen(ie_descriptions[j].ie);
         j++) {
      record_offset[j] += next_offset;
      next_offset += ie_descriptions[j].ie_length;
    }
  }

Decoding could be done with an array of functions like this:

static void (or int, for error returns)
decode_uint32(void* ret, const uint8_t** buf, const uint8_t* limit,
              size_t wire_length) {
  uint32_t r = 0;
  for (unsigned int i = 0; i < wireLength; i++)
    r = (r << 4) | (*buf)[i];
  *static_cast<uint32_t*>(ret) = r;
  *buf += wire_length;
}

static void
decode_double(void* ret, const uint8_t** buf, const uint8_t* limit,
              size_t wire_length) {
  /* Only IEEE floats (32 bit) or doubles (64 bit) allowed */
  assert(wire_length == 4 || wire_length == 8);

  union {
    float f;
    double d;
    uint8_t b[8];
  } val;

  // Assume that 0.0F and 0.0 and '\0' are represented as all zeros
  // (which is not mandated by the C++ standard).
  memset(val.b, sizeof val, '\0'); // or val.d = 0.0;

  for (unsigned int i = 0; i < wire_length; i++)
    val.b[i] = (*buf)[i];

  if (wire_length == 4) // There's a float on the wire
    *static_cast<double*>(ret) = val.f;  // Implicit conversion to double
  else // There's a double on the wire
    *static_cast<double*>(ret) = val.d;

  *buf += wire_length;
}

static void
decode_varlen(void* ret, const uint8_t** buf, const uint8_t* limit,
              size_t wire_length) {
  size_t varlen_length = ...;
  // decode the varlen
  *buf += varlen_length;
}

also, one can skip:

static void
skip_fixlen(void* ret, const uint8_t** buf, const uint8_t* limit,
            size_t wire_length) {
  assert(ret == 0);
  *buf += wire_length;
}

static void
skip_varlen(void* ret, const uint8_t** buf, const uint8_t* limit,
            size_t wire_length) {
  assert(ret == 0);
  size_t varlen_length = ...;
  *buf += varlen_length;
  // recompute offsets...
}


The whole decoding could then be described by an array of function
pointers:

void* ret[];
void (*decode[])(void* ret, const uint8_t** buf, const uint8_t* limit,
                 size_t wire_length);

// ...

uint8_t* buf = ...;
for (unsigned int i = 0; i < n_ies; i++) {
  assert (*buf is in range);
  assert (*buf + ie_descriptions[j].ie_length is in range);
  decode[i](ret[i], &buf, buf + record_length, ie_descriptions[j].ie_length);
}
